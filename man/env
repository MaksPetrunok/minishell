
ENV(1)                    BSD General Commands Manual                   ENV(1)

NNAAMMEE
     eennvv -- set environment and execute command, or print environment

SSYYNNOOPPSSIISS
     eennvv [--iivv] [--PP _a_l_t_p_a_t_h] [--SS _s_t_r_i_n_g] [--uu _n_a_m_e] [_n_a_m_e=_v_a_l_u_e _._._.]
         [_u_t_i_l_i_t_y [_a_r_g_u_m_e_n_t _._._.]]

DDEESSCCRRIIPPTTIIOONN
     The eennvv utility executes another _u_t_i_l_i_t_y after modifying the environment
     as specified on the command line.  Each _n_a_m_e=_v_a_l_u_e option specifies the
     setting of an environment variable, _n_a_m_e, with a value of _v_a_l_u_e.  All
     such environment variables are set before the _u_t_i_l_i_t_y is executed.

     The options are as follows:

     --ii      Execute the _u_t_i_l_i_t_y with only those environment variables speci-
             fied by _n_a_m_e=_v_a_l_u_e options.  The environment inherited by eennvv is
             ignored completely.

     --PP _a_l_t_p_a_t_h
             Search the set of directories as specified by _a_l_t_p_a_t_h to locate
             the specified _u_t_i_l_i_t_y program, instead of using the value of the
             PATH environment variable.

     --SS _s_t_r_i_n_g
             Split apart the given _s_t_r_i_n_g into multiple strings, and process
             each of the resulting strings as separate arguments to the eennvv
             utility.  The --SS option recognizes some special character escape
             sequences and also supports environment-variable substitution, as
             described below.

     --uu _n_a_m_e
             If the environment variable _n_a_m_e is in the environment, then
             remove it before processing the remaining options.  This is simi-
             lar to the uunnsseett command in sh(1).  The value for _n_a_m_e must not
             include the `=' character.

     --vv      Print verbose information for each step of processing done by the
             eennvv utility.  Additional information will be printed if --vv is
             specified multiple times.

     The above options are only recognized when they are specified before any
     _n_a_m_e=_v_a_l_u_e options.

     If no _u_t_i_l_i_t_y is specified, eennvv prints out the names and values of the
     variables in the environment, with one name/value pair per line.

   DDeettaaiillss ooff --SS ((sspplliitt--ssttrriinngg)) pprroocceessssiinngg
     The processing of the --SS option will split the given _s_t_r_i_n_g into separate
     arguments based on any space or <tab> characters found in the _s_t_r_i_n_g.
     Each of those new arguments will then be treated as if it had been speci-
     fied as a separate argument on the original eennvv command.

     Spaces and tabs may be embedded in one of those new arguments by using
     single (``''') or double (`"') quotes, or backslashes (`\').  Single
     quotes will escape all non-single quote characters, up to the matching
     single quote.  Double quotes will escape all non-double quote characters,
     up to the matching double quote.  It is an error if the end of the _s_t_r_i_n_g
     is reached before the matching quote character.

     If --SS would create a new argument that starts with the `#' character,
     then that argument and the remainder of the _s_t_r_i_n_g will be ignored.  The
     `\#' sequence can be used when you want a new argument to start with a
     `#' character, without causing the remainder of the _s_t_r_i_n_g to be skipped.

     While processing the _s_t_r_i_n_g value, --SS processing will treat certain char-
     acter combinations as escape sequences which represent some action to
     take.  The character escape sequences are in backslash notation.  The
     characters and their meanings are as follows:

           \\cc      Ignore the remaining characters in the _s_t_r_i_n_g.  This must
                   not appear inside a double-quoted string.
           \\ff      Replace with a <form-feed> character.
           \\nn      Replace with a <new-line> character.
           \\rr      Replace with a <carriage return> character.
           \\tt      Replace with a <tab> character.
           \\vv      Replace with a <vertical tab> character.
           \\##      Replace with a `#' character.  This would be useful when
                   you need a `#' as the first character in one of the argu-
                   ments created by splitting apart the given _s_t_r_i_n_g.
           \\$$      Replace with a `$' character.
           \\__      If this is found inside of a double-quoted string, then
                   replace it with a single blank.  If this is found outside
                   of a quoted string, then treat this as the separator char-
                   acter between new arguments in the original _s_t_r_i_n_g.
           \\""      Replace with a <double quote> character.
           \\''      Replace with a <single quote> character.
           \\\\      Replace with a backslash character.

     The sequences for <single-quote> and backslash are the only sequences
     which are recognized inside of a single-quoted string.  The other
     sequences have no special meaning inside a single-quoted string.  All
     escape sequences are recognized inside of a double-quoted string.  It is
     an error if a single `\' character is followed by a character other than
     the ones listed above.

     The processing of --SS also supports substitution of values from environ-
     ment variables.  To do this, the name of the environment variable must be
     inside of `${}', such as: ${SOMEVAR}.  The common shell syntax of
     $SOMEVAR is not supported.  All values substituted will be the values of
     the environment variables as they were when the eennvv utility was origi-
     nally invoked.  Those values will not be checked for any of the escape
     sequences as described above.  And any settings of _n_a_m_e=_v_a_l_u_e will not
     effect the values used for substitution in --SS processing.

     Also, --SS processing can not reference the value of the special parameters
     which are defined by most shells.  For instance, --SS can not recognize
     special parameters such as: `$*', `$@', `$#', `$?' or `$$' if they appear
     inside the given _s_t_r_i_n_g.

   UUssee iinn sshheellll--ssccrriippttss
     The eennvv utility is often used as the _i_n_t_e_r_p_r_e_t_e_r on the first line of
     interpreted scripts, as described in execve(2).

     Note that the way the kernel parses the `#!' (first line) of an inter-
     preted script has changed as of FreeBSD 6.0.  Prior to that, the FreeBSD
     kernel would split that first line into separate arguments based on any
     whitespace (space or <tab> characters) found in the line.  So, if a
     script named _/_u_s_r_/_l_o_c_a_l_/_b_i_n_/_s_o_m_e_p_o_r_t had a first line of:

           #!/usr/local/bin/php -n -q -dsafe_mode=0

     then the _/_u_s_r_/_l_o_c_a_l_/_b_i_n_/_p_h_p program would have been started with the
     arguments of:

           arg[0] = '/usr/local/bin/php'
           arg[1] = '-n'
           arg[2] = '-q'
           arg[3] = '-dsafe_mode=0'
           arg[4] = '/usr/local/bin/someport'

     plus any arguments the user specified when executing _s_o_m_e_p_o_r_t.  However,
     this processing of multiple options on the `#!' line is not the way any
     other operating system parses the first line of an interpreted script.
     So after a change which was made for FreeBSD 6.0 release, that script
     will result in _/_u_s_r_/_l_o_c_a_l_/_b_i_n_/_p_h_p being started with the arguments of:

           arg[0] = '/usr/local/bin/php'
           arg[1] = '-n -q -dsafe_mode=0'
           arg[2] = '/usr/local/bin/someport'

     plus any arguments the user specified.  This caused a significant change
     in the behavior of a few scripts.  In the case of above script, to have
     it behave the same way under FreeBSD 6.0 as it did under earlier
     releases, the first line should be changed to:

           #!/usr/bin/env -S /usr/local/bin/php -n -q -dsafe_mode=0

     The eennvv utility will be started with the entire line as a single argu-
     ment:

           arg[1] = '-S /usr/local/bin/php -n -q -dsafe_mode=0'

     and then --SS processing will split that line into separate arguments
     before executing _/_u_s_r_/_l_o_c_a_l_/_b_i_n_/_p_h_p.

EENNVVIIRROONNMMEENNTT
     The eennvv utility uses the PATH environment variable to locate the
     requested _u_t_i_l_i_t_y if the name contains no `/' characters, unless the --PP
     option has been specified.

EEXXIITT SSTTAATTUUSS
     The eennvv utility exits 0 on success, and >0 if an error occurs.  An exit
     status of 126 indicates that _u_t_i_l_i_t_y was found, but could not be exe-
     cuted.  An exit status of 127 indicates that _u_t_i_l_i_t_y could not be found.

EEXXAAMMPPLLEESS
     Since the eennvv utility is often used as part of the first line of an
     interpreted script, the following examples show a number of ways that the
     eennvv utility can be useful in scripts.

     The kernel processing of an interpreted script does not allow a script to
     directly reference some other script as its own interpreter.  As a way
     around this, the main difference between

           #!/usr/local/bin/foo
     and
           #!/usr/bin/env /usr/local/bin/foo

     is that the latter works even if _/_u_s_r_/_l_o_c_a_l_/_b_i_n_/_f_o_o is itself an inter-
     preted script.

     Probably the most common use of eennvv is to find the correct interpreter
     for a script, when the interpreter may be in different directories on
     different systems.  The following example will find the `perl' inter-
     preter by searching through the directories specified by PATH.

           #!/usr/bin/env perl

     One limitation of that example is that it assumes the user's value for
     PATH is set to a value which will find the interpreter you want to exe-
     cute.  The --PP option can be used to make sure a specific list of directo-
     ries is used in the search for _u_t_i_l_i_t_y.  Note that the --SS option is also
     required for this example to work correctly.

           #!/usr/bin/env -S -P/usr/local/bin:/usr/bin perl

     The above finds `perl' only if it is in _/_u_s_r_/_l_o_c_a_l_/_b_i_n or _/_u_s_r_/_b_i_n.  That
     could be combined with the present value of PATH, to provide more flexi-
     bility.  Note that spaces are not required between the --SS and --PP options:

           #!/usr/bin/env -S-P/usr/local/bin:/usr/bin:${PATH} perl

CCOOMMPPAATTIIBBIILLIITTYY
     The eennvv utility accepts the -- option as a synonym for --ii.

SSEEEE AALLSSOO
     printenv(1), sh(1), execvp(3), environ(7)

SSTTAANNDDAARRDDSS
     The eennvv utility conforms to IEEE Std 1003.1-2001 (``POSIX.1'').  The --PP,
     --SS, --uu and --vv options are non-standard extensions supported by FreeBSD,
     but which may not be available on other operating systems.

HHIISSTTOORRYY
     The eennvv command appeared in 4.4BSD.  The --PP, --SS and --vv options were added
     in FreeBSD 6.0.

BBUUGGSS
     The eennvv utility does not handle values of _u_t_i_l_i_t_y which have an equals
     sign (`=') in their name, for obvious reasons.

     The eennvv utility does not take multibyte characters into account when pro-
     cessing the --SS option, which may lead to incorrect results in some
     locales.

BSD                             April 17, 2008                             BSD
